// ignore_for_file: non_constant_identifier_names
// ignore_for_file: camel_case_types
// ignore_for_file: prefer_single_quotes

// This file is automatically generated. DO NOT EDIT, all your changes would be lost.
import 'package:xianliao/models/user/login_entity.dart';
import 'package:xianliao/generated/json/login_entity_helper.dart';
import 'package:xianliao/models/cloud_disk/disk_path_entity.dart';
import 'package:xianliao/generated/json/disk_path_entity_helper.dart';
import 'package:xianliao/models/user/user_info_entity.dart';
import 'package:xianliao/generated/json/user_info_entity_helper.dart';
import 'package:xianliao/models/cli_base_entity.dart';
import 'package:xianliao/generated/json/cli_base_entity_helper.dart';
import 'package:xianliao/models/topic/topics_list_entity.dart';
import 'package:xianliao/generated/json/topics_list_entity_helper.dart';
import 'package:xianliao/models/topic/topic_detail_entity.dart';
import 'package:xianliao/generated/json/topic_detail_entity_helper.dart';

class JsonConvert<T> {
	T fromJson(Map<String, dynamic> json) {
		return _getFromJson<T>(runtimeType, this, json);
	}

  Map<String, dynamic> toJson() {
		return _getToJson<T>(runtimeType, this);
  }

  static _getFromJson<T>(Type type, data, json) {
    switch (type) {
			case LoginEntity:
				return loginEntityFromJson(data as LoginEntity, json) as T;
			case LoginData:
				return loginDataFromJson(data as LoginData, json) as T;
			case DiskPathEntity:
				return diskPathEntityFromJson(data as DiskPathEntity, json) as T;
			case DiskPathData:
				return diskPathDataFromJson(data as DiskPathData, json) as T;
			case DiskPathDataPath:
				return diskPathDataPathFromJson(data as DiskPathDataPath, json) as T;
			case UserInfoEntity:
				return userInfoEntityFromJson(data as UserInfoEntity, json) as T;
			case UserInfoData:
				return userInfoDataFromJson(data as UserInfoData, json) as T;
			case CliBaseEntity:
				return cliBaseEntityFromJson(data as CliBaseEntity, json) as T;
			case TopicsListEntity:
				return topicsListEntityFromJson(data as TopicsListEntity, json) as T;
			case TopicsListData:
				return topicsListDataFromJson(data as TopicsListData, json) as T;
			case TopicsListDataTopic:
				return topicsListDataTopicFromJson(data as TopicsListDataTopic, json) as T;
			case TopicDetailEntity:
				return topicDetailEntityFromJson(data as TopicDetailEntity, json) as T;
			case TopicDetailData:
				return topicDetailDataFromJson(data as TopicDetailData, json) as T;
			case TopicDetailDataTopic:
				return topicDetailDataTopicFromJson(data as TopicDetailDataTopic, json) as T;
			case TopicDetailDataFile:
				return topicDetailDataFileFromJson(data as TopicDetailDataFile, json) as T;
			case TopicDetailDataTag:
				return topicDetailDataTagFromJson(data as TopicDetailDataTag, json) as T;    }
    return data as T;
  }

  static _getToJson<T>(Type type, data) {
		switch (type) {
			case LoginEntity:
				return loginEntityToJson(data as LoginEntity);
			case LoginData:
				return loginDataToJson(data as LoginData);
			case DiskPathEntity:
				return diskPathEntityToJson(data as DiskPathEntity);
			case DiskPathData:
				return diskPathDataToJson(data as DiskPathData);
			case DiskPathDataPath:
				return diskPathDataPathToJson(data as DiskPathDataPath);
			case UserInfoEntity:
				return userInfoEntityToJson(data as UserInfoEntity);
			case UserInfoData:
				return userInfoDataToJson(data as UserInfoData);
			case CliBaseEntity:
				return cliBaseEntityToJson(data as CliBaseEntity);
			case TopicsListEntity:
				return topicsListEntityToJson(data as TopicsListEntity);
			case TopicsListData:
				return topicsListDataToJson(data as TopicsListData);
			case TopicsListDataTopic:
				return topicsListDataTopicToJson(data as TopicsListDataTopic);
			case TopicDetailEntity:
				return topicDetailEntityToJson(data as TopicDetailEntity);
			case TopicDetailData:
				return topicDetailDataToJson(data as TopicDetailData);
			case TopicDetailDataTopic:
				return topicDetailDataTopicToJson(data as TopicDetailDataTopic);
			case TopicDetailDataFile:
				return topicDetailDataFileToJson(data as TopicDetailDataFile);
			case TopicDetailDataTag:
				return topicDetailDataTagToJson(data as TopicDetailDataTag);
			}
			return data as T;
		}
  //Go back to a single instance by type
	static _fromJsonSingle<M>( json) {
		String type = M.toString();
		if(type == (LoginEntity).toString()){
			return LoginEntity().fromJson(json);
		}	else if(type == (LoginData).toString()){
			return LoginData().fromJson(json);
		}	else if(type == (DiskPathEntity).toString()){
			return DiskPathEntity().fromJson(json);
		}	else if(type == (DiskPathData).toString()){
			return DiskPathData().fromJson(json);
		}	else if(type == (DiskPathDataPath).toString()){
			return DiskPathDataPath().fromJson(json);
		}	else if(type == (UserInfoEntity).toString()){
			return UserInfoEntity().fromJson(json);
		}	else if(type == (UserInfoData).toString()){
			return UserInfoData().fromJson(json);
		}	else if(type == (CliBaseEntity).toString()){
			return CliBaseEntity().fromJson(json);
		}	else if(type == (TopicsListEntity).toString()){
			return TopicsListEntity().fromJson(json);
		}	else if(type == (TopicsListData).toString()){
			return TopicsListData().fromJson(json);
		}	else if(type == (TopicsListDataTopic).toString()){
			return TopicsListDataTopic().fromJson(json);
		}	else if(type == (TopicDetailEntity).toString()){
			return TopicDetailEntity().fromJson(json);
		}	else if(type == (TopicDetailData).toString()){
			return TopicDetailData().fromJson(json);
		}	else if(type == (TopicDetailDataTopic).toString()){
			return TopicDetailDataTopic().fromJson(json);
		}	else if(type == (TopicDetailDataFile).toString()){
			return TopicDetailDataFile().fromJson(json);
		}	else if(type == (TopicDetailDataTag).toString()){
			return TopicDetailDataTag().fromJson(json);
		}	
		return null;
	}

  //list is returned by type
	static M _getListChildType<M>(List data) {
		if(List<LoginEntity>() is M){
			return data.map((e) => LoginEntity().fromJson(e)).toList() as M;
		}	else if(List<LoginData>() is M){
			return data.map((e) => LoginData().fromJson(e)).toList() as M;
		}	else if(List<DiskPathEntity>() is M){
			return data.map((e) => DiskPathEntity().fromJson(e)).toList() as M;
		}	else if(List<DiskPathData>() is M){
			return data.map((e) => DiskPathData().fromJson(e)).toList() as M;
		}	else if(List<DiskPathDataPath>() is M){
			return data.map((e) => DiskPathDataPath().fromJson(e)).toList() as M;
		}	else if(List<UserInfoEntity>() is M){
			return data.map((e) => UserInfoEntity().fromJson(e)).toList() as M;
		}	else if(List<UserInfoData>() is M){
			return data.map((e) => UserInfoData().fromJson(e)).toList() as M;
		}	else if(List<CliBaseEntity>() is M){
			return data.map((e) => CliBaseEntity().fromJson(e)).toList() as M;
		}	else if(List<TopicsListEntity>() is M){
			return data.map((e) => TopicsListEntity().fromJson(e)).toList() as M;
		}	else if(List<TopicsListData>() is M){
			return data.map((e) => TopicsListData().fromJson(e)).toList() as M;
		}	else if(List<TopicsListDataTopic>() is M){
			return data.map((e) => TopicsListDataTopic().fromJson(e)).toList() as M;
		}	else if(List<TopicDetailEntity>() is M){
			return data.map((e) => TopicDetailEntity().fromJson(e)).toList() as M;
		}	else if(List<TopicDetailData>() is M){
			return data.map((e) => TopicDetailData().fromJson(e)).toList() as M;
		}	else if(List<TopicDetailDataTopic>() is M){
			return data.map((e) => TopicDetailDataTopic().fromJson(e)).toList() as M;
		}	else if(List<TopicDetailDataFile>() is M){
			return data.map((e) => TopicDetailDataFile().fromJson(e)).toList() as M;
		}	else if(List<TopicDetailDataTag>() is M){
			return data.map((e) => TopicDetailDataTag().fromJson(e)).toList() as M;
		}
		return null;
	}

  static M fromJsonAsT<M>(json) {
    if (json is List) {
      return _getListChildType<M>(json);
    } else {
      return _fromJsonSingle<M>(json) as M;
    }
  }
}